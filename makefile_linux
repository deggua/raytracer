CC = clang
LD = lld-link

CC_FLAGS_FILE = compile_flags.txt
CC_FLAGS = $(shell cat $(CC_FLAGS_FILE))

CC_FLAGS_DEBUG_MODE = -g3 -O0 -fuse-ld=lld

CC_FLAGS_RELEASE_MODE = -g3 -Ofast -flto
CC_FLAGS_RELEASE_MODE += -fuse-ld=lld  -Wl,-O3 -Wl,--lto-O3, -Wl,--icf=all, -Wl,--gc-sections
CC_FLAGS_RELEASE_MODE += -funsafe-math-optimizations -fno-math-errno -funroll-loops
CC_FLAGS_RELEASE_MODE += -DNDEBUG

CC_FLAGS_DEBUG = $(CC_FLAGS_DEBUG_MODE) $(CC_FLAGS)
CC_FLAGS_RELEASE = $(CC_FLAGS_RELEASE_MODE) $(CC_FLAGS)
CC_FLAGS_SANITIZE = $(CC_FLAGS_DEBUG) -fsanitize=address
CC_FLAGS_PROFILE = $(CC_FLAGS_RELEASE) -pg -a

SRC_DIR = src
OBJ_DIR = obj
BIN_DIR = bin

SRCS = $(SRC_DIR)/main.c
SRCS += $(wildcard $(SRC_DIR)/common/*.c)
SRCS += $(wildcard $(SRC_DIR)/math/*.c)
SRCS += $(wildcard $(SRC_DIR)/gfx/*.c)
SRCS += $(wildcard $(SRC_DIR)/rt/*.c)
SRCS += $(wildcard $(SRC_DIR)/rt/accelerators/*.c)
SRCS += $(wildcard $(SRC_DIR)/world/*.c)

SRCS += $(wildcard $(SRC_DIR)/platform/linux/*.c)
OBJS = $(SRCS:src/%.c=obj/%.o)

DEBUG_FNAME 	:= rtdbg.out
RELEASE_FNAME 	:= rt.out
SANITIZE_FNAME 	:= rtsan.out
PROFILE_FNAME 	:= rtprof.out

all: debug release

debug: $(BIN_DIR)/$(DEBUG_FNAME)

release: $(BIN_DIR)/$(RELEASE_FNAME)

$(BIN_DIR)/$(DEBUG_FNAME): $(OBJS)
	mkdir -p $(@D)
	$(CC) -o $(BIN_DIR)/$(DEBUG_FNAME) $(CC_FLAGS_DEBUG) -x none $(OBJS)

$(BIN_DIR)/$(RELEASE_FNAME): $(OBJS)
	mkdir -p $(@D)
	$(CC) -o $(BIN_DIR)/$(RELEASE_FNAME) $(CC_FLAGS_RELEASE) -x none $(OBJS)

obj/%.o: src/%.c $(CC_FLAGS_FILE)
	mkdir -p $(@D)
	$(CC) -o $@ $(CC_FLAGS_RELEASE) -c $<

sanitize:
	mkdir -p $(@D)
	$(CC) -o $(BIN_DIR)/$(SANITIZE_FNAME) $(CC_FLAGS_SANITIZE) $(SRCS)

profile:
	mkdir -p $(@D)
	$(CC) -o $(BIN_DIR)/$(PROFILE_FNAME) $(CC_FLAGS_PROFILE) $(SRCS)

clean:
	rm -rf $(BIN_DIR)
	rm -rf $(OBJ_DIR)
